<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title></title>
 <link href="http://nurav.github.io/atom.xml" rel="self"/>
 <link href="http://nurav.github.io/"/>
 <updated>2015-12-22T01:08:11+05:30</updated>
 <id>http://nurav.github.io</id>
 <author>
   <name></name>
 </author>
 
 
   
   <entry>
     <title>Write Back Plugins: What's the Best Way?</title>
     <link href="http://nurav.github.io/2015/12/06/write-back-plugins-whats-the-best-way.html"/>
     <updated>2015-12-06T13:22:18+05:30</updated>
     <id>http://nurav.github.io/2015/12/06/write-back-plugins-whats-the-best-way</id>
     <content type="html">&lt;p&gt;That’s been a large gap between posts! I’m really sorry about that, I was busy with my university exams and with coding.&lt;/p&gt;

&lt;p&gt;I have mainly been working on the write-back plugin mechanism that we needed to incorporate into KFileMetaData. Most of my changes are visible at &lt;a href=&quot;https://github.com/nurav/kfilemetadata/tree/varun-writerplugins&quot;&gt;my fork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The work yet has involved a couple of decisions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Deciding the structure of the framework:&lt;/p&gt;

    &lt;p&gt;While writing the code for write-back plugins, I noticed lots of commonalities amongst what I was writing and extractors. I thought of abstracting out these common elements into a generic Plugin class, that would optionally support both reading writing data. Alas, this could not be done. Doing this would involve changing the ABI of KFileMetaData, breaking compatibility with other tools that use the current version. So, after consulting with my &lt;a href=&quot;http://vhanda.in&quot;&gt;mentor&lt;/a&gt;, I decided to rewrite the write-back plugin infrastructure from scratch. Developers working on both writer and extractor plugins will have to find a way to share data outside of the infrastructure we will provide.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deciding what writers to write first:&lt;/p&gt;

    &lt;p&gt;Some of the libraries that we currently use for extraction don’t support writing back yet. Poppler is one case. Though they are working on &lt;a href=&quot;https://bugs.freedesktop.org/show_bug.cgi?id=36653&quot;&gt;adding support for writing back PDF metadata&lt;/a&gt;, it’s not ready yet, and I’ll have to defer writing a plugin for PDF metadata (or else implement external writer support first, as BaloneyGeek on #kde-devel suggested). I have started with writing a rudimentary TagLib writer, and I’m going to progress into writing a writer for epub books as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I have learned yet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CMake: Though I have struggled a lot with it, my efforts are starting to bear fruit. I finally feel comfortable making my own CMakeLists.txt.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Qt: I’m learning a lot about all the functionalities Qt offers, and I try to integrate whatever I can from what I learn into the code. My mentor’s suggestions have also taught me a lot about some less obvious parts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C++: Exploring the code base, I chanced upon a lot of new patterns, like the PIMPL, object reuse etc. I try my best to know why what is done, so I avoid the pitfalls that the creators of these patterns faced.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s enough about what I’ve learned. I’ll now outline some of the changes you’ll see on my fork that you just might see in the final framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A new &lt;code class=&quot;highlighter-rouge&quot;&gt;WriterPlugin&lt;/code&gt; class:&lt;/p&gt;

    &lt;p&gt;This class will be subclassed by all plugins that hope to write data to some file. The most important functions are &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;writeMimetypes&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; is where the action is. &lt;code class=&quot;highlighter-rouge&quot;&gt;WriterPlugin&lt;/code&gt;s will implement this function to actually write the metadata to disk. &lt;code class=&quot;highlighter-rouge&quot;&gt;writeMimetypes&lt;/code&gt; simply lists the mimetypes supported by the plugin. A &lt;code class=&quot;highlighter-rouge&quot;&gt;supportedProperties&lt;/code&gt; function is also something that I plan to add, to make sure that applications do not attempt to write an unsuitable proptery datum to some file. This is sort of analogous to &lt;code class=&quot;highlighter-rouge&quot;&gt;ExtractorPlugin&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; framework:&lt;/p&gt;

    &lt;p&gt;I have put in analogues to most of the functionalities that &lt;code class=&quot;highlighter-rouge&quot;&gt;Extractor&lt;/code&gt;s offer. Instead of using something similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;ExtractionResult&lt;/code&gt; that needed to be subclassed, I have used &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteData&lt;/code&gt;, which is concrete. The rationale behind this is that we won’t need to store huge amounts of data to write back, since we don’t support writing back text.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;TagLibWriter&lt;/code&gt; class:&lt;/p&gt;

    &lt;p&gt;This shows how the new &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; classes can be used. It is really rudimentary at the moment, but I plan to extend it to support writing back all the properties that can be read by &lt;code class=&quot;highlighter-rouge&quot;&gt;TagLibExtractor&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The road ahead: This is just the beginning of what I have planned for the Season of KDE. I plan to work on &lt;a href=&quot;https://git.reviewboard.kde.org/r/125762&quot;&gt;Boudhayan Gupta’s patch&lt;/a&gt;, change it so that it can be used for &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt;s and implement the suggestions put forth by vHanda to improve it.&lt;/p&gt;

&lt;p&gt;It’s been an exciting journey so far, and it’s going to get even better!&lt;/p&gt;

&lt;p&gt;Signing off,
Varun&lt;/p&gt;

</content>
   </entry>
   
 
   
   <entry>
     <title>Hello World</title>
     <link href="http://nurav.github.io/2015/11/14/hello-world.html"/>
     <updated>2015-11-14T00:17:48+05:30</updated>
     <id>http://nurav.github.io/2015/11/14/hello-world</id>
     <content type="html">&lt;p&gt;So this is where I’ll be documenting my progress throughout the Season of KDE, as I had promised in my proposal. I will post updates whenever I make any significant progress.&lt;/p&gt;

&lt;p&gt;Awesome things are (hopefully) coming!&lt;/p&gt;
</content>
   </entry>
   
 
   
 
   
   <entry>
     <title>Left</title>
     <link href="http://nurav.github.io/left/posts/2012/12/12/left.html"/>
     <updated>2012-12-12T00:00:00+05:30</updated>
     <id>http://nurav.github.io/left/posts/2012/12/12/left</id>
     <content type="html">&lt;p&gt;Left is a clean, whitespace-happy layout for &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is designed to be an easy layout to modify for your own blog. It was
extracted from &lt;a href=&quot;http://zachholman.com&quot;&gt;zachholman.com&lt;/a&gt;, which means it was battle-hardened from
years of posting serious blog posts about emoji and swear words.&lt;/p&gt;

&lt;p&gt;You’re actually reading an example post right now. See how cool it is? Oh, be
quiet, you’re making me blush.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ll want to &lt;a href=&quot;https://github.com/holman/left#readme&quot;&gt;get the code&lt;/a&gt; and read the README to learn how to
install and set up Left for your own purposes.&lt;/p&gt;

&lt;p&gt;If you have any questions, follow and ping me on Twitter- I’m
&lt;a href=&quot;https://twitter.com/holman&quot;&gt;@holman&lt;/a&gt;.&lt;/p&gt;

</content>
   </entry>
   
 
 
</feed>
