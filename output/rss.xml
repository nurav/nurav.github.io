<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Varun's Blog</title><link>http://nurav.github.io/</link><description>My musings on technology and other things</description><atom:link href="http://nurav.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 24 May 2016 13:26:43 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Multifile Responses in Balrog</title><link>http://nurav.github.io/posts/multifile-responses-in-balrog/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;p&gt;Apart from Firefox, Balrog is also used by Mozilla to provide updates for the Gecko Media Plugin (GMP) package. The Gecko Media Plugin package contains various plugins for media support, like the OpenH264 codec and the Widevine plugin. To handle updates to these, we have a speical GMP blob that lists updates to the plugins. Updates to every plugin are included in one blob. This leads to problems when there are multiple versions of a plugin that we can use. For example, we might serve OpenH264 version 1.5.3 on Firefox 42 on Windows and version 1.5.2 on Firefox 40. We have to maintain a blob for each possible combination of versions. With an increase in the number of versions available, this method of serving updates might become intractable.&lt;/p&gt;
&lt;p&gt;Ben and I discussed various strategies we could use to tackle this. A gist of what went through our minds is on &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1245941"&gt;the bug page&lt;/a&gt;. What we eventually went ahead with was to add a blob type that got its contents from other blobs. We call this blob type &lt;tt class="docutils literal"&gt;SuperBlob&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="superblob"&gt;
&lt;h2&gt;SuperBlob&lt;/h2&gt;
&lt;p&gt;A SuperBlob is basically just a redirection mechanism. It just contains the names of the products that we wish to include in the generated XML.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 {
    "name": "fake",
    "schema_version": 4000,
    "products": [
        "c",
        "d"
    ]
}
&lt;/pre&gt;
&lt;p&gt;This superblob is called &lt;tt class="docutils literal"&gt;fake&lt;/tt&gt;. It just asks to look at the products named &lt;tt class="docutils literal"&gt;c&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;d&lt;/tt&gt;. A rule can be set to point at this SuperBlob if we wish the response product to have all the files listed in products &lt;tt class="docutils literal"&gt;c&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;d&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-this-work"&gt;
&lt;h2&gt;How does this work?&lt;/h2&gt;
&lt;p&gt;The web interface, while processing requests, checks if the rule evaluates to a SuperBlob. If it is, it gets the product names from the SuperBlob and gets the corresponding blobs by evaluating the query with the requested product changed. So, in our example, the web interface will evaluate the query with the product name changed to &lt;tt class="docutils literal"&gt;c&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;d&lt;/tt&gt; and obtain the resultant blobs. It will pick up the header and footer XML from the output of processing the blob obtained from the &lt;strong&gt;first product&lt;/strong&gt; and the inner XML will include the concatenated inner XMLs of all the blobs obtained from the products listed in the SuperBlob.&lt;/p&gt;
&lt;p&gt;So, if product &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; gave:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;updates&amp;gt;
    &amp;lt;update type="minor" version="None" extensionVersion="2.5" buildID="25"&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/b" hashFunction="sha512" hashValue="23" size="27777777"/&amp;gt;
    &amp;lt;/update&amp;gt;
&amp;lt;/updates&amp;gt;
&lt;/pre&gt;
&lt;p&gt;and product &lt;tt class="docutils literal"&gt;b&lt;/tt&gt; gave:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;updates&amp;gt;
    &amp;lt;update type="minor" version="None" extensionVersion="2.5" buildID="25"&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/public" hashFunction="sha512" hashValue="23" size="22"/&amp;gt;
    &amp;lt;/update&amp;gt;
&amp;lt;/updates&amp;gt;
&lt;/pre&gt;
&lt;p&gt;the &lt;tt class="docutils literal"&gt;SuperBlob&lt;/tt&gt; will give:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;updates&amp;gt;
    &amp;lt;update type="minor" version="None" extensionVersion="2.5" buildID="25"&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/public" hashFunction="sha512" hashValue="23" size="22"/&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/b" hashFunction="sha512" hashValue="23" size="27777777"/&amp;gt;
    &amp;lt;/update&amp;gt;
&amp;lt;/updates&amp;gt;
&lt;/pre&gt;
&lt;p&gt;So, we can now have one fixed rule for all GMP responses and have several rules for each constituent plugin without having to worry about the combinations like we had to do earlier.&lt;/p&gt;
&lt;p&gt;While working on this, I also removed the &lt;tt class="docutils literal"&gt;createXML&lt;/tt&gt; method in favour of three methods that return the header, the inner XML and the footer respectively. This helped in seperating the various components of the XML output without having to parse it. The XML generation logic has moved to the client view.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Mozilla</category><guid>http://nurav.github.io/posts/multifile-responses-in-balrog/</guid><pubDate>Mon, 16 May 2016 17:59:34 GMT</pubDate></item><item><title>Guess who got into Google Summer of Code?</title><link>http://nurav.github.io/posts/guess-who-got-into-google-summer-of-code/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm really excited to say that I'll be participating in Google Summer of Code this year, with Mozilla! I'm going to be working on the Balrog update server this summer, under &lt;a class="reference external" href="http://hearsum.ca"&gt;Ben's&lt;/a&gt; guidance. Thank you Mozilla and Google for giving me this chance!&lt;/p&gt;
&lt;p&gt;I'll be optimizing Balrog by devising a mechanism to handle update races. A future blog post will describe how exactly these races occur and how I aim to resolve them. Basically, an algorithm similar to what git uses for 3-way merges is required, but we also need to take care of nesting since the 'Blob' data structure, that we use, has nested data. I will also share my proposal and the timeline I'll be following in the coming weeks.&lt;/p&gt;
&lt;p&gt;These three months are going to be amazing and I'm really looking forward to working with the Mozilla RelEng community! I will be blogging weekly once the coding period commences, and I welcome any suggestions that might lead to me presenting a better final product.&lt;/p&gt;&lt;/div&gt;</description><category>Mozilla</category><guid>http://nurav.github.io/posts/guess-who-got-into-google-summer-of-code/</guid><pubDate>Sat, 30 Apr 2016 18:14:47 GMT</pubDate></item><item><title>External Plugins: Alternatives</title><link>http://nurav.github.io/posts/2015-12-22-external-plugins-alternatives/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;ul&gt;
&lt;li&gt;Embedding a Python Interpreter:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/extending/embedding.html"&gt;The Python Docs&lt;/a&gt; show how this can be done. We can use &lt;a href="http://www.boost.org/doc/libs/1_59_0/libs/python/doc/index.html"&gt;Boost.Python&lt;/a&gt; to access a higher-level API. We'd just have to scan the contents of some predefined directory, where each Python script would be in some specific format (with functions like &lt;code&gt;mimetypes&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;extract&lt;/code&gt;), and make a C++ shim that would generate a &lt;code&gt;WriterPlugin&lt;/code&gt; or &lt;code&gt;ExtractorPlugin&lt;/code&gt; for each script. &lt;/p&gt;
&lt;p&gt;The main limitation to this approach would be that it would involve a lot of effort if I needed to support multiple languages, since I would need to embed all of their interpreters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a process for each plugin:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every plugin would include a manifest that would detail how it is to be used. For example, a Java plugin would have to be run with the JVM, a Python one with CPython etc. The manifest would also have other information like supported mimetypes, properties write-back capabilities, etc. Whenever a &lt;code&gt;WriterPlugin&lt;/code&gt; or an &lt;code&gt;ExtractorPlugin&lt;/code&gt; is needed for a particular mimetype, all installed plugins are checked for support. Writing or reading metadata using a new plugin will invoke a new process using the instructions specified in the manifest. There are several ways we could use to communicate with the process:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;1. Using DBus: Would allow for more structed communication between the plugin and the framework. It would also decouple the plugins. But it might be overkill since limited communication is needed between the plugin and the framework.

2. Using named pipes: This allows for decoupling too, but again, might be overkill since we aren't transferring large amounts of data.

3. Using stdin/stdout: This is the method Boudhayan Gupta has used in his patch. We need to carefully error conditions.
&lt;/pre&gt;


&lt;p&gt;The data is exchanged in the JSON format.&lt;/p&gt;
&lt;p&gt;We have decided to create a new process for each plugin and use stdin/stdout for communication, since it is the most straighforward way. If you think that there are other ways, or there is a discernible benefit to using any of the other methods I've listed, please let me know in the comments.&lt;/p&gt;
&lt;p&gt;Things to keep in mind (mostly suggested by vhanda on &lt;a href="https://git.reviewboard.kde.org/r/125762"&gt;Boudhayan Gupta's patch&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There needs to be a proper error-handling framework, to make sure that an invalid plugin does not block execution for long periods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependencies need to be handled, both for languages and language libraries. How I'm planning to do this with Python will be covered in a future post.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There needs to be a way to select from amongst several plugins offering support for the same mimetypes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So that's about it for this post. I'm currently working on this, so you should expect to see some code soon. Thanks, and as always, please feel free to suggest any improvements I could make to my approach!&lt;/p&gt;&lt;/div&gt;</description><guid>http://nurav.github.io/posts/2015-12-22-external-plugins-alternatives/</guid><pubDate>Tue, 22 Dec 2015 03:16:06 GMT</pubDate></item><item><title>Write Back Plugins: What's the Best Way?</title><link>http://nurav.github.io/posts/2015-12-06-write-back-plugins-whats-the-best-way/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;p&gt;I have mainly been working on the write-back plugin mechanism that we needed to incorporate into KFileMetaData. Most of my changes are visible at &lt;a href="https://github.com/nurav/kfilemetadata/tree/varun-writerplugins"&gt;my fork&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The work yet has involved a couple of decisions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deciding the structure of the framework:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While writing the code for write-back plugins, I noticed lots of commonalities amongst what I was writing and extractors. I thought of abstracting out these common elements into a generic Plugin class, that would optionally support both reading writing data. Alas, this could not be done. Doing this would involve changing the ABI of KFileMetaData, breaking compatibility with other tools that use the current version. So, after consulting with my &lt;a href="http://vhanda.in"&gt;mentor&lt;/a&gt;, I decided to rewrite the write-back plugin infrastructure from scratch. Developers working on both writer and extractor plugins will have to find a way to share data outside of the infrastructure we will provide.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deciding what writers to write first:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the libraries that we currently use for extraction don't support writing back yet. Poppler is one case. Though they are working on &lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=36653"&gt;adding support for writing back PDF metadata&lt;/a&gt;, it's not ready yet, and I'll have to defer writing a plugin for PDF metadata (or else implement external writer support first, as BaloneyGeek on #kde-devel suggested). I have started with writing a rudimentary TagLib writer, and I'm going to progress into writing a writer for epub books as well.&lt;/p&gt;
&lt;p&gt;What I have learned yet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CMake: Though I have struggled a lot with it, my efforts are starting to bear fruit. I finally feel comfortable making my own CMakeLists.txt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qt: I'm learning a lot about all the functionalities Qt offers, and I try to integrate whatever I can from what I learn into the code. My mentor's suggestions have also taught me a lot about some less obvious parts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++: Exploring the code base, I chanced upon a lot of new patterns, like the PIMPL, object reuse etc. I try my best to know why what is done, so I avoid the pitfalls that the creators of these patterns faced.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's enough about what I've learned. I'll now outline some of the changes you'll see on my fork that you just might see in the final framework:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new &lt;code&gt;WriterPlugin&lt;/code&gt; class: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This class will be subclassed by all plugins that hope to write data to some file. The most important functions are &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;writeMimetypes&lt;/code&gt;. &lt;code&gt;write&lt;/code&gt; is where the action is. &lt;code&gt;WriterPlugin&lt;/code&gt;s will implement this function to actually write the metadata to disk. &lt;code&gt;writeMimetypes&lt;/code&gt; simply lists the mimetypes supported by the plugin. A &lt;code&gt;supportedProperties&lt;/code&gt; function is also something that I plan to add, to make sure that applications do not attempt to write an unsuitable proptery datum to some file. This is sort of analogous to &lt;code&gt;ExtractorPlugin&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Writer&lt;/code&gt; framework:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have put in analogues to most of the functionalities that &lt;code&gt;Extractor&lt;/code&gt;s offer. Instead of using something similar to &lt;code&gt;ExtractionResult&lt;/code&gt; that needed to be subclassed, I have used &lt;code&gt;WriteData&lt;/code&gt;, which is concrete. The rationale behind this is that we won't need to store huge amounts of data to write back, since we don't support writing back text.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;TagLibWriter&lt;/code&gt; class:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This shows how the new &lt;code&gt;Writer&lt;/code&gt; classes can be used. It is really rudimentary at the moment, but I plan to extend it to support writing back all the properties that can be read by &lt;code&gt;TagLibExtractor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The road ahead: This is just the beginning of what I have planned for the Season of KDE. I plan to work on &lt;a href="https://git.reviewboard.kde.org/r/125762"&gt;Boudhayan Gupta's patch&lt;/a&gt;, change it so that it can be used for &lt;code&gt;Writer&lt;/code&gt;s and implement the suggestions put forth by vHanda to improve it.&lt;/p&gt;
&lt;p&gt;It's been an exciting journey so far, and it's going to get even better! And if you have any suggestions for me to improve upon, please do let me know of them via comments. Thank you!&lt;/p&gt;
&lt;p&gt;Signing off,
Varun&lt;/p&gt;&lt;/div&gt;</description><guid>http://nurav.github.io/posts/2015-12-06-write-back-plugins-whats-the-best-way/</guid><pubDate>Sun, 06 Dec 2015 07:52:18 GMT</pubDate></item><item><title>My project was selected for the Season of KDE!</title><link>http://nurav.github.io/posts/2015-11-14-hello-world/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;p&gt;So this is where I'll be documenting my progress throughout the Season of KDE, as I had promised in my proposal. This will help me look back and improve on mistakes that I might have made earlier. I will post updates whenever I make any significant progress.&lt;/p&gt;
&lt;p&gt;Please feel welcome to make suggestions, I'd love to know how I could do things better! Awesome things are (hopefully) coming!&lt;/p&gt;&lt;/div&gt;</description><guid>http://nurav.github.io/posts/2015-11-14-hello-world/</guid><pubDate>Sat, 14 Nov 2015 00:17:48 GMT</pubDate></item></channel></rss>