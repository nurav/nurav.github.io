<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Varun's Blog (Mozilla)</title><link>http://nurav.github.io/</link><description></description><atom:link href="http://nurav.github.io/categories/mozilla.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 24 May 2016 14:54:06 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solving Update Races in Balrog: The Plan</title><link>http://nurav.github.io/posts/solving-update-races-in-balrog-the-plan/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;p&gt;The coding period for the Google Summer of Code has begun, so here is the plan for the project, as was promised.&lt;/p&gt;
&lt;p&gt;Currently, when two submitter tasks request Balrog for a blob to update at the same time, they both have the same data_version in the blob they send back with the added locale. This leads to the server rejecting one of these and the submitter having to retry. In most cases, the updates can simply be merged, preventing the retries. For example, this series of events is something like what happens now:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Submitter 1 requests data from Balrog (and receives data specifying data_version = 1)&lt;/li&gt;
&lt;li&gt;Submitter 2 requests data from Balrog (data_version = 1)&lt;/li&gt;
&lt;li&gt;Submitter 1 submits release blob to Balrog with data_version  (data_version changes to 2)&lt;/li&gt;
&lt;li&gt;Submitter 2 fails to submit release blob to Balrog (since data_version is now 2, but submitter specified 1 in the request)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At most times, the data in the blobs is similar apart from some added data such as added locales. So, we can try to reduce submission failures by devising a way to merge the blob versions when we receive a request with an outdated data_version. As my project, I will seek to implement the merging of two blobs. This will be with the utilization of a three-way merge algorithm, something similar to what git uses for merges. Since we currently do not have any libraries for this task, I will make a module for three-way merges of python data structures (and hopefully get it published on PyPI!) and use that within Balrog to accomplish the goals of this project.&lt;/p&gt;
&lt;p&gt;The basic algorithm for three-way merges is described here:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We first calculate a diff between the new versions of the file (data_version 2 and the version where we fail, in our example) and the old version (data_version 1). There are multiple tools that allow diffs of the form we want. &lt;a class="reference external" href="https://github.com/inveniosoftware/dictdiffer"&gt;DictDiffer&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/seperman/deepdiff"&gt;deepdiff&lt;/a&gt; are two alternatives we could utilize for this step. Both of them return an easy to use list of differences in our blobs.&lt;/li&gt;
&lt;li&gt;If there are no changes for that particular item in either diff or if both diffs have added an element with equal values, we add the item in the resultant object.&lt;/li&gt;
&lt;li&gt;If both diffs have removed some item, we ignore that item and do not include it in our output.&lt;/li&gt;
&lt;li&gt;If one diff has added an element while the other hasn't, we add the element.&lt;/li&gt;
&lt;li&gt;If both diffs have added or changed an element but they have unequal values, we recursively apply our algorithm. If there is a difference in a string that was present in the the root version (data_version 1 in our example), we might apply a string three way merge algorithm.&lt;/li&gt;
&lt;li&gt;For lists, we can treat every list element as a line in text and apply a traditional three way merge algorithm to it.&lt;/li&gt;
&lt;li&gt;For all other cases, we may consider the two changes to be conflicting and we may apply some conflict resolution strategies.&lt;/li&gt;
&lt;li&gt;If the type of an element changes, we can consider it to be a merge conflict.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Further analysis needs to be done for the handling of list and tuple values, since the preservation of order might be important in those data structures. We might want to support two modes: one where the preservation of the order of the list elements is important and another where it isn't. In some cases, merging strings might also be undesireable, so even might need to be made optional.&lt;/p&gt;
&lt;p&gt;We may employ several merge-conflict resolution strategies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Select one of the changes.&lt;/li&gt;
&lt;li&gt;Discard both changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This algorithm is based on this &lt;a class="reference external" href="http://www.cis.upenn.edu/~bcpierce/papers/diff3-short.pdf"&gt;research paper&lt;/a&gt; and this &lt;a class="reference external" href="https://www.mercurial-scm.org/pipermail/mercurial-devel/2006-November/000322.html"&gt;email&lt;/a&gt;. Both show how a three way merge would work out for strings.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.google.com/document/d/1jRi6nPNYvja2vqFWIAZ7JHTpnW8mOp8tTRnfIxxlxDY/edit?usp=sharing"&gt;Here&lt;/a&gt;  is a link to my proposal. Keep checking this space every week for updates on my project and feel free to point out if I can do anything better! Thank you :)&lt;/p&gt;&lt;/div&gt;</description><category>Mozilla</category><guid>http://nurav.github.io/posts/solving-update-races-in-balrog-the-plan/</guid><pubDate>Tue, 24 May 2016 08:37:57 GMT</pubDate></item><item><title>Multifile Responses in Balrog</title><link>http://nurav.github.io/posts/multifile-responses-in-balrog/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;p&gt;Apart from Firefox, Balrog is also used by Mozilla to provide updates for the Gecko Media Plugin (GMP) package. The Gecko Media Plugin package contains various plugins for media support, like the OpenH264 codec and the Widevine plugin. To handle updates to these, we have a speical GMP blob that lists updates to the plugins. Updates to every plugin are included in one blob. This leads to problems when there are multiple versions of a plugin that we can use. For example, we might serve OpenH264 version 1.5.3 on Firefox 42 on Windows and version 1.5.2 on Firefox 40. We have to maintain a blob for each possible combination of versions. With an increase in the number of versions available, this method of serving updates might become intractable.&lt;/p&gt;
&lt;p&gt;Ben and I discussed various strategies we could use to tackle this. A gist of what went through our minds is on &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1245941"&gt;the bug page&lt;/a&gt;. What we eventually went ahead with was to add a blob type that got its contents from other blobs. We call this blob type &lt;tt class="docutils literal"&gt;SuperBlob&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="superblob"&gt;
&lt;h2&gt;SuperBlob&lt;/h2&gt;
&lt;p&gt;A SuperBlob is basically just a redirection mechanism. It just contains the names of the products that we wish to include in the generated XML.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 {
    "name": "fake",
    "schema_version": 4000,
    "products": [
        "c",
        "d"
    ]
}
&lt;/pre&gt;
&lt;p&gt;This superblob is called &lt;tt class="docutils literal"&gt;fake&lt;/tt&gt;. It just asks to look at the products named &lt;tt class="docutils literal"&gt;c&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;d&lt;/tt&gt;. A rule can be set to point at this SuperBlob if we wish the response product to have all the files listed in products &lt;tt class="docutils literal"&gt;c&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;d&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-this-work"&gt;
&lt;h2&gt;How does this work?&lt;/h2&gt;
&lt;p&gt;The web interface, while processing requests, checks if the rule evaluates to a SuperBlob. If it is, it gets the product names from the SuperBlob and gets the corresponding blobs by evaluating the query with the requested product changed. So, in our example, the web interface will evaluate the query with the product name changed to &lt;tt class="docutils literal"&gt;c&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;d&lt;/tt&gt; and obtain the resultant blobs. It will pick up the header and footer XML from the output of processing the blob obtained from the &lt;strong&gt;first product&lt;/strong&gt; and the inner XML will include the concatenated inner XMLs of all the blobs obtained from the products listed in the SuperBlob.&lt;/p&gt;
&lt;p&gt;So, if product &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; gave:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;updates&amp;gt;
    &amp;lt;update type="minor" version="None" extensionVersion="2.5" buildID="25"&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/b" hashFunction="sha512" hashValue="23" size="27777777"/&amp;gt;
    &amp;lt;/update&amp;gt;
&amp;lt;/updates&amp;gt;
&lt;/pre&gt;
&lt;p&gt;and product &lt;tt class="docutils literal"&gt;b&lt;/tt&gt; gave:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;updates&amp;gt;
    &amp;lt;update type="minor" version="None" extensionVersion="2.5" buildID="25"&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/public" hashFunction="sha512" hashValue="23" size="22"/&amp;gt;
    &amp;lt;/update&amp;gt;
&amp;lt;/updates&amp;gt;
&lt;/pre&gt;
&lt;p&gt;the &lt;tt class="docutils literal"&gt;SuperBlob&lt;/tt&gt; will give:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;updates&amp;gt;
    &amp;lt;update type="minor" version="None" extensionVersion="2.5" buildID="25"&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/public" hashFunction="sha512" hashValue="23" size="22"/&amp;gt;
        &amp;lt;patch type="complete" URL="http://a.com/b" hashFunction="sha512" hashValue="23" size="27777777"/&amp;gt;
    &amp;lt;/update&amp;gt;
&amp;lt;/updates&amp;gt;
&lt;/pre&gt;
&lt;p&gt;So, we can now have one fixed rule for all GMP responses and have several rules for each constituent plugin without having to worry about the combinations like we had to do earlier.&lt;/p&gt;
&lt;p&gt;While working on this, I also removed the &lt;tt class="docutils literal"&gt;createXML&lt;/tt&gt; method in favour of three methods that return the header, the inner XML and the footer respectively. This helped in seperating the various components of the XML output without having to parse it. The XML generation logic has moved to the client view.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Mozilla</category><guid>http://nurav.github.io/posts/multifile-responses-in-balrog/</guid><pubDate>Mon, 16 May 2016 17:59:34 GMT</pubDate></item><item><title>Guess who got into Google Summer of Code?</title><link>http://nurav.github.io/posts/guess-who-got-into-google-summer-of-code/</link><dc:creator>Varun Joshi</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm really excited to say that I'll be participating in Google Summer of Code this year, with Mozilla! I'm going to be working on the Balrog update server this summer, under &lt;a class="reference external" href="http://hearsum.ca"&gt;Ben's&lt;/a&gt; guidance. Thank you Mozilla and Google for giving me this chance!&lt;/p&gt;
&lt;p&gt;I'll be optimizing Balrog by devising a mechanism to handle update races. A future blog post will describe how exactly these races occur and how I aim to resolve them. Basically, an algorithm similar to what git uses for 3-way merges is required, but we also need to take care of nesting since the 'Blob' data structure, that we use, has nested data. I will also share my proposal and the timeline I'll be following in the coming weeks.&lt;/p&gt;
&lt;p&gt;These three months are going to be amazing and I'm really looking forward to working with the Mozilla RelEng community! I will be blogging weekly once the coding period commences, and I welcome any suggestions that might lead to me presenting a better final product.&lt;/p&gt;&lt;/div&gt;</description><category>Mozilla</category><guid>http://nurav.github.io/posts/guess-who-got-into-google-summer-of-code/</guid><pubDate>Sat, 30 Apr 2016 18:14:47 GMT</pubDate></item></channel></rss>